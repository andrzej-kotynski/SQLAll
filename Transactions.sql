/*Transactions

* A transaction is a single unit of work, sometimes made up of multiple operations.

* For example, a transaction could consist of one or more SQL statements which
change data in a table.

* In order to maintain consistency in a database, a transaction should have four
properties as given by the ACID acroynm:
	--Atomic
	--Consistency
	--Isolation
	--Durability


Atomic:
Either all the statements within the transaction are successfully saved or none
of them are saved. You do no twant some statements to succeed and some that
fail. Instead, it should be all or nothing.
When a change is saved to the database, we say that it has been commited to the
database.

Consistency:
A transaction should move the database from one consistent state to another.
All data remains valid according to defined rules such as constraints.

Isolation:
Each transaction occurs in isolation. In other words, no transaction will be
affected by any other transaction. When a transaction is isolated, then multiple
transactions can occur independently of each other without interference.

Durability:
Changes made by a successful transaction are commited to the database and will
persist even if a system failure event occurs e.g., if a power failure event were
to occur.

* A transaction is successful if no errors are raised.

* If a transaction encounters errors, then it must be canceled or rolled back.
Therefore, no data modifications are committed.

* The default mode for SQL Server is that it auto-commits every successful SQL
statement.

* If you successfully execute a statement - such as an INSERT statement - then 
it will be automatically committed to the database.



/* Explicit Transactions*/

* An explicit transaction can be defined by using a BEGIN TRANSACTION statement.
This then can be ended with either a COMMIT or ROLLBACK statement.

* It is common to put an explicit transaction within a stored procedure.
*/
USE SAMPLEDB
GO

-- Begin a new Transaction:
BEGIN TRANSACTION;

-- Declare a variable called @new_product_id that will hold the new product_id value:
DECLARE @new_product_id INT;

-- Insert the new product. The product_id value is generated by the IDENTITY property:
INSERT INTO oes.products (product_name, category_id, list_price, discontinued)
	VALUES ('PBX Printer', 7, 45.99, 0);

-- The SCOPE_IDENTITY() function returns the last value inserted into the 
-- IDENTITY column:
SET @new_product_id = SCOPE_IDENTITY();

-- Insert the inventory information for the new product:
INSERT INTO oes.inventories (product_id, warehouse_id, quantity_on_hand)
	VALUES (@new_product_id, 1, 100),
		   (@new_product_id, 4, 35);

-- Commit the changes. The commit will only happen if both insert statements
-- are successful:
COMMIT TRANSACTION;